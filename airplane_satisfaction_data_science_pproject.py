# -*- coding: utf-8 -*-
"""AIRPLANE SATISFACTION- DATA SCIENCE PPROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJq2FX5mw_mDEQR0XSEoj6aDZT7SkMxD
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#loading the dataset
df = pd.read_csv("/content/train.csv")

from google.colab import drive
drive.mount('/content/drive')

# Drop irrelevant columns
df = df.drop(columns=["Unnamed: 0", "id"])

# Fill missing values
df["Arrival Delay in Minutes"].fillna(df["Arrival Delay in Minutes"].median(), inplace=True)

# Label encoding for categorical variables
from sklearn.preprocessing import LabelEncoder
categorical_cols = df.select_dtypes(include="object").columns

for col in categorical_cols:
    encoder = LabelEncoder()
    df[col] = encoder.fit_transform(df[col])

#Descriptive Statistics
df.describe()

#Satisfaction Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x="satisfaction", data=df, palette="pastel")
plt.title("Distribution of Passenger Satisfaction")
plt.xlabel("Satisfaction")
plt.ylabel("Count")
plt.show()

#Flight Distance vs Satisfaction
plt.figure(figsize=(8, 5))
sns.boxplot(x="satisfaction", y="Flight Distance", data=df, palette="Set2")
plt.title("Flight Distance vs Satisfaction")
plt.xlabel("Satisfaction")
plt.ylabel("Flight Distance")
plt.show()

#Age Distribution
plt.figure(figsize=(8, 5))
sns.histplot(df["Age"], bins=30, kde=True, color="skyblue")
plt.title("Age Distribution of Passengers")
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.show()

#Correlation Heatmap
plt.figure(figsize=(14, 10))
corr_matrix = df.corr()
sns.heatmap(corr_matrix, cmap='coolwarm', annot=False, linewidths=0.5)
plt.title("Correlation Heatmap of Numerical Features")
plt.show()

#Satisfaction by Travel Class
plt.figure(figsize=(7, 4))
sns.countplot(x="Class", hue="satisfaction", data=df, palette="muted")
plt.title("Satisfaction Levels by Travel Class")
plt.xlabel("Class of Travel")
plt.ylabel("Passenger Count")
plt.legend(title="Satisfaction")
plt.show()

from sklearn.preprocessing import LabelEncoder
from scipy.stats import chi2_contingency

df = pd.read_csv("train.csv")
df.drop(columns=["Unnamed: 0", "id"], inplace=True)
df["Arrival Delay in Minutes"].fillna(df["Arrival Delay in Minutes"].median(), inplace=True)

# Preserve original satisfaction column for chi-square analysis
original_satisfaction = df["satisfaction"]

# Encode categorical variables for correlation analysis
df_encoded = df.copy()
categorical_cols = df_encoded.select_dtypes(include="object").columns
encoders = {}

for col in categorical_cols:
    encoders[col] = LabelEncoder()
    df_encoded[col] = encoders[col].fit_transform(df_encoded[col])

# 1. Compute correlation of all features with 'satisfaction'
correlations = df_encoded.corr()["satisfaction"].sort_values(ascending=False)

# Top positively correlated features
print("\n🔹 Top 5 Positively Correlated Features with Satisfaction:")
print(correlations[1:6])

# Top negatively correlated features
print("\n🔹 Top 5 Negatively Correlated Features with Satisfaction:")
print(correlations[-5:])

# 2. Chi-square test between Gender and Satisfaction
print("\n🔹 Chi-Square Test: Gender vs Satisfaction")

# Create contingency table
chi2_table = pd.crosstab(df["Gender"], df["satisfaction"])

# Run chi-square test
chi2_stat, p_val, dof, expected = chi2_contingency(chi2_table)

print(f"Chi-Square Statistic = {chi2_stat:.2f}")
print(f"p-value = {p_val:.5f}")

# Interpretation
if p_val < 0.05:
    print("✅ Gender and Satisfaction are statistically dependent.")
else:
    print("❌ No significant relationship between Gender and Satisfaction.")

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay

# Encode categorical variables
df_encoded = df.copy()
categorical_cols = df_encoded.select_dtypes(include="object").columns
encoders = {}
for col in categorical_cols:
    encoders[col] = LabelEncoder()
    df_encoded[col] = encoders[col].fit_transform(df_encoded[col])

# Define features and target variable
X = df_encoded.drop("satisfaction", axis=1)
y = df_encoded["satisfaction"]

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
logreg = LogisticRegression(max_iter=1000)
logreg.fit(X_train, y_train)

# Make predictions
y_pred = logreg.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, y_pred)
print(f"🔹 Accuracy: {accuracy:.2f}")

print("\n🔹 Classification Report:")
print(classification_report(y_test, y_pred))

# Plot Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=logreg.classes_)
disp.plot(cmap="Blues")
plt.title("Confusion Matrix - Logistic Regression")
plt.show()

# Encode categorical variables
df_encoded = df.copy()
categorical_cols = df_encoded.select_dtypes(include="object").columns
encoders = {}
for col in categorical_cols:
    encoders[col] = LabelEncoder()
    df_encoded[col] = encoders[col].fit_transform(df_encoded[col])

# Define features and target
X = df_encoded.drop("satisfaction", axis=1)
y = df_encoded["satisfaction"]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest model
from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict and evaluate
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay

rf_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)
print(f"🔹 Accuracy: {rf_accuracy:.2f}")
print("\n🔹 Classification Report:")
print(classification_report(y_test, rf_pred))

# Confusion matrix
rf_conf_matrix = confusion_matrix(y_test, rf_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=rf_conf_matrix, display_labels=rf_model.classes_)
disp.plot(cmap="Greens")
plt.title("Confusion Matrix - Random Forest")
plt.show()